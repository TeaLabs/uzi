<?php
namespace Tea\Tests\Uzi\Providers;

use Tea\Uzi\Str;
use Tea\Tests\Uzi\Specimens\Object;
use Tea\Tests\Uzi\Specimens\Traversable;
use Tea\Tests\Uzi\Specimens\HasToString;

trait StrProviders
{

	public function asciiProvider()
	{
		return [
			['foo bar', 'f√≤√¥ b√†≈ô'],
			[' TEST ', ' ≈§√â≈ö≈¢ '],
			['f = z = 3', 'œÜ = ≈∫ = 3'],
			['perevirka', '–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞'],
			['lysaya gora', '–ª—ã—Å–∞—è –≥–æ—Ä–∞'],
			['shchuka', '—â—É–∫–∞'],
			['', 'Êº¢Â≠ó'],
			['xin chao the gioi', 'xin ch√†o th·∫ø gi·ªõi'],
			['XIN CHAO THE GIOI', 'XIN CH√ÄO TH·∫æ GI·ªöI'],
			['dam phat chet luon', 'ƒë·∫•m ph√°t ch·∫øt lu√¥n'],
			[' ', '¬†'], // no-break space (U+00A0)
			['           ', '‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää'], // spaces U+2000 to U+200A
			[' ', '‚ÄØ'], // narrow no-break space (U+202F)
			[' ', '‚Åü'], // medium mathematical space (U+205F)
			[' ', '„ÄÄ'], // ideographic space (U+3000)
			['', 'êçâ'], // some uncommon, unsupported character (U+10349)
			['êçâ', 'êçâ', false],
		];
	}

	public function beginProvider()
	{
		return [
			['¬© foo', '¬©¬©¬© foo', '¬©'],
			['~¬©¬©~foo', '¬©¬©~foo', '~'],
			['/foo/bar/', 'foo/bar/', '/'],
			['/foo/bar/', 'foo/bar/', '/', false],
			['/foo/bar/', '//foo/bar/', '/'],
			['\/foo\/bar/', '\/\/foo\/bar/', '\/'],
			['/foo/bar/', '/foo/bar/', '/', false],
			['//foo/bar/', '//foo/bar/', '/', false],
			['xxxfooxbarx', 'xxxxxfooxbarx', 'xx'],
			['+-+foo+bar-', '+-+-+-+foo+bar-', '+-'],
		];
	}

	public function compactProvider()
	{
		return [
			['foo + bar', '  foo   +   bar   '],
			["foo bar foo bar", "    \nfoo    bar   \nfoo   bar    \n "],
			['Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ', '   Œü     œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ  ', ' ', 'UTF-8'],
			['', '‚ÄØ', ' ', 'UTF-8'],
			['x', '‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää', 'x', 'UTF-8']
		];
	}

	public function containsProvider()
	{
		return [
			// Single needle
			// 1. Pain strings
			[true, 'Str contains foo bar', 'foo bar'],
			[true, '12398!@(*%!@# @!%#*&^%',  ' @!%#*&^%'],
			[true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', 'œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ', true,'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√•¬¥¬•¬©', true, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√•Àö ‚àÜ', true, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√∏≈ì¬¨', true, 'UTF-8'],
			[false, 'Str contains foo bar', 'Foo bar'],
			[false, 'Str contains foo bar', 'foobar'],
			[false, 'Str contains foo bar', 'foo bar '],
			[false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', true, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', ' √ü√•Àö', true, 'UTF-8'],
			[true, 'Str contains foo bar', 'Foo bar', false],
			[true, '12398!@(*%!@# @!%#*&^%',  ' @!%#*&^%', false],
			[true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', 'Œ£Œ•ŒìŒìŒ°ŒëŒ¶ŒàŒëŒ£', false, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√Ö¬¥¬•¬©', false, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√ÖÀö ‚àÜ', false, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√ò≈í¬¨', false, 'UTF-8'],
			[false, 'Str contains foo bar', 'foobar', false],
			[false, 'Str contains foo bar', 'foo bar ', false],
			[false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', false, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', ' √ü√ÖÀö', false, 'UTF-8'],

			// 2. Str objects.
			[true, 'Str contains foo bar', new Str('foo bar')],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new Str('√∏≈ì¬¨', 'UTF-8'), true, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new Str(' √ü√•Àö', 'UTF-8'), true, 'UTF-8'],

			// 3. Objects implementing __toString()
			[true, 'Str contains foo bar', new HasToString('foo bar')],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new HasToString('√∏≈ì¬¨', 'UTF-8'), true, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new HasToString(' √ü√•Àö', 'UTF-8'), true, 'UTF-8'],

			// Multiple needles
			// 1. Arrays
			array(false, 'Str contains foo bar', array()),
			array(true, 'Str contains foo bar', array('foo', 'bar')),
			array(true, '12398!@(*%!@# @!%#*&^%', array(' @!%#*', '&^%')),
			array(true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('œÉœÖŒ≥Œ≥œÅ', 'Œ±œÜŒ≠Œ±œÇ'), 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√•¬¥¬•', '¬©'), true, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√•Àö ', '‚àÜ'), true, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√∏≈ì', '¬¨'), true, 'UTF-8'),
			array(false, 'Str contains foo bar', array('Foo', 'Bar')),
			array(false, 'Str contains foo bar', array('foobar', 'bar ')),
			array(false, 'Str contains foo bar', array('foo bar ', '  foo')),
			array(false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜ '), true, 'UTF-8'),
			array(false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array(' √ü√•Àö', ' √ü '), true, 'UTF-8'),
			array(true, 'Str contains foo bar', array('Foo bar', 'bar'), false),
			array(true, '12398!@(*%!@# @!%#*&^%', array(' @!%#*&^%', '*&^%'), false),
			array(true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('Œ£Œ•ŒìŒìŒ°ŒëŒ¶ŒàŒëŒ£', 'ŒëŒ¶ŒàŒë'), false, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√Ö¬¥¬•¬©', '¬•¬©'), false, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√ÖÀö ‚àÜ', ' ‚àÜ'), false, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√ò≈í¬¨', '≈í'), false, 'UTF-8'),
			array(false, 'Str contains foo bar', array('foobar', 'none'), false),
			array(false, 'Str contains foo bar', array('foo bar ', ' ba '), false),
			array(false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', ' œÅŒ±œÜŒ≠ '), false, 'UTF-8'),
			array(false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array(' √ü√ÖÀö', ' √ÖÀö '), false, 'UTF-8'),

			// 2 .Traversable Objects
			array(true, 'Str contains foo bar', new Traversable(array('foo', 'bar')) ),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new Traversable(array('√•¬¥¬•', '¬©')), true, 'UTF-8'),
			array(false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', new Traversable(array('  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜ ')), true, 'UTF-8'),
			array(false, 'Str contains foo bar', new Traversable(array('foo bar ', ' ba ')), false),
		];
	}


	public function containsAnyProvider()
	{
		// Converts single needles to array
		$data = array_map(function ($array) {
			if(!is_array($array[2]) && !($array[2] instanceof Traversable))
				$array[2] = array($array[2]);

			return $array;
		}, $this->containsProvider());


	}


	public function delimitProvider()
	{
		return array(
			array('test*case', 'testCase', '*'),
			array('test&case', 'Test-Case', '&'),
			array('test#case', 'test case', '#'),
			array('test**case', 'test -case', '**'),
			array('~!~test~!~case', '-test - case', '~!~'),
			array('test*case', 'test_case', '*'),
			array('test%c%test', '  test c test', '%'),
			array('test+u+case', 'TestUCase', '+'),
			array('test=c=c=test', 'TestCCTest', '='),
			array('string#>with1number', 'string_with1number', '#>'),
			array('1test2case', '1test2case', '*'),
			array('test œçŒ± œÉase', 'test Œ£ase', ' œçŒ± ', 'UTF-8',),
			array('œÉœÑŒ±ŒΩŒπŒªŒ±case', 'Œ£œÑŒ±ŒΩŒπŒª case', 'Œ±', 'UTF-8',),
			array('œÉashŒòcase', 'Œ£ash  Case', 'Œò', 'UTF-8')
		);
	}

	public function endsWithProvider()
	{
		return [

			array(true, 'foo bars', 'o bars'),
			array(true, 'FOO bars', 'o bars', false),
			array(true, 'FOO bars', 'o BARs', false),
			array(true, 'F√í√î b√†≈ôs', '√¥ b√†≈ôs', false, 'UTF-8'),
			array(true, 'F√í√î b√†≈ôs', Str::create('√¥ b√†≈ôs', 'UTF-8'), false, 'UTF-8'),
			array(true, 'f√≤√¥ b√†≈ôs', '√¥ B√Ä≈òs', false, 'UTF-8'),
			array(true, 'f√≤√¥ b√†≈ôs', Str::create('√¥ B√Ä≈òs', 'UTF-8'), false, 'UTF-8'),
			array(false, 'foo bar', 'foo'),
			array(false, 'foo bar', 'foo bars'),
			array(false, 'FOO bar', 'foo bars'),
			array(false, 'FOO bars', 'foo BARS'),
			array(false, 'F√í√î b√†≈ôs', 'f√≤√¥ b√†≈ôs', true, 'UTF-8'),
			array(false, 'F√í√î b√†≈ôs', Str::create('f√≤√¥ b√†≈ôs', 'UTF-8'), true, 'UTF-8'),
			array(false, 'f√≤√¥ b√†≈ôs', 'f√≤√¥ B√Ä≈òS', true, 'UTF-8'),
			[true, 'foo bars', ['barz', 'barx','xxx', 'foo', 'foo','o bars']],
			[true, 'FOO bars', ['barz', 'barx','xxx', 'foo', 'o bars'], false],
			[true, 'FOO bars', ['barz', 'barx','xxx', 'foo', 'b', 'o BARs'], false],
			[true, 'F√í√î b√†≈ôs', ['barz', 'barx','xxx', 'foo', 'b√†≈ô', '√¥ b√†≈ôs', 'dfsd'], false, 'UTF-8'],
			[true, 'f√≤√¥ b√†≈ôs', ['barz', 'barx','xxx', 'foo', '√¥ B√Ä≈òs', 'dwedd'], false, 'UTF-8'],
			[true, 'f√≤√¥ b√†≈ôs', ['barz', 'barx','xxx', 'foo', '√¥ B√Ä≈òs'], false, 'UTF-8'],
			[false, 'f√≤√¥ b√†≈ôs', ['barz', 'barx','xxx', 'foo', '√¥ B√Ä≈òs'], true, 'UTF-8'],
			[false, 'foo bar', ['barz', 'barx','xxx', 'foo']],
			[false, 'foo bar', ['barz', 'barx','xxx', 'foo', 'BAR', 'foo']],
			[false, 'foo bar', ['barz', 'barx','xxx', 'foo', 'foo bars']],
			[false, 'FOO bar', ['barz', 'barx','xxx', 'foo', 'foo bars']],
			[false, 'FOO bars', ['barz', 'barx','xxx', 'foo', 'foo BARS']],
			[true, 'F√í√î b√†≈ôs', ['barz', 'barx','xxx', 'foo', 'f√≤√¥ b√†≈ôs'], false, 'UTF-8'],
			[false, 'F√í√î b√†≈ôs', ['barz', 'barx','xxx', 'foo', 'f√≤√¥ b√†≈ôs'], true, 'UTF-8'],
			[false, 'f√≤√¥ b√†≈ôs', ['barz', 'barx','xxx', 'foo', 'B√Ä≈òS'], true, 'UTF-8'],
			[true, 'F√í√î b√†≈ôs', ['barz', 'barx','xxx', 'foo', 'b√†≈ô', '√¥ b√†≈ôs'], false, 'UTF-8'],
			// 2 .Traversable Objects
			[false, 'F√í√î b√†≈ôs', new Traversable('f√≤√¥ b√†≈ôs'), true, 'UTF-8'],
			[false, 'f√≤√¥ b√†≈ôs', new Traversable('B√Ä≈òS'), true, 'UTF-8'],
			[true, 'F√í√î b√†≈ôs', new Traversable(['b√†≈ô', '√¥ b√†≈ôs']), false, 'UTF-8'],
			[true, 'f√≤√¥ b√†≈ôs', new Traversable('√¥ B√Ä≈òs'), false, 'UTF-8'],
		];
	}


	public function startsWithProvider()
	{
		return array(
			array(true, 'foo bars', 'foo bar'),
			array(true, 'FOO bars', 'foo bar', false),
			array(true, 'FOO bars', 'foo BAR', false),
			array(true, 'F√í√î b√†≈ôs', 'f√≤√¥ b√†≈ô', false, 'UTF-8'),
			array(true, 'f√≤√¥ b√†≈ôs', 'f√≤√¥ B√Ä≈ò', false, 'UTF-8'),
			array(false, 'foo bar', 'bar'),
			array(false, 'foo bar', 'foo bars'),
			array(false, 'FOO bar', 'foo bars'),
			array(false, 'FOO bars', 'foo BAR'),
			array(false, 'F√í√î b√†≈ôs', 'f√≤√¥ b√†≈ô', true, 'UTF-8'),
			array(false, 'f√≤√¥ b√†≈ôs', 'f√≤√¥ B√Ä≈ò', true, 'UTF-8'),


			array(true, 'foo bars', ['barz', 'barx', 'xxx', 'foo bar', 'foo']),
			array(true, 'FOO bars', ['barz', 'barx', 'xxx', 'foo BAR', 'fss'], false),
			array(true, 'F√í√î b√†≈ôs', ['barz', 'barx', 'xxx', 'f√≤√¥ b√†≈ô'], false, 'UTF-8'),
			array(true, 'f√≤√¥ b√†≈ôs', ['f√≤√¥ B√Ä≈ò', 'sfsfs', 'sfsfsf'], false, 'UTF-8'),

			array(false, 'FOO bar', ['barz', 'barx', 'xxx', 'foo bars']),
			array(false, 'FOO bars', ['barz', 'barx', 'xxx', 'foo BAR']),
			array(false, 'F√í√î b√†≈ôs', ['barz', 'barx', 'xxx', 'f√≤√¥ b√†≈ô'], true, 'UTF-8'),
			array(false, 'f√≤√¥ b√†≈ôs', ['barz', 'barx', 'xxx', 'f√≤√¥ B√Ä≈ò'], true, 'UTF-8'),

			);
	}



	public function finishProvider()
	{
		return [
			['foo¬©', 'foo', '¬©'],
			['foo¬©', 'foo¬©¬©¬©', '¬©'],
			['foo~¬©¬©~', 'foo~¬©¬©', '~'],
			['/foo/bar/', '/foo/bar', '/'],
			['/foo/bar/', '/foo/bar', '/', false],
			['/foo/bar/', '/foo/bar//', '/'],
			['/foo/bar//', '/foo/bar//', '/', false],
			['xfooxbarxxx', 'xfooxbarxxxxx', 'xx'],
			['+-foo+bar++-', '+-foo+bar++-+-+-', '+-'],
		];
	}

	public function joinProvider()
	{
		return [
			['a/b/c', '/', ['a', 'b', 'c']],
			['a//b//c', '/', ['a', '/b/', 'c'], false],
			['a,,b,c,', ',', ['a', '','b', 'c', ''], false],
			[',a,,b,c,', ',', [ '', 'a', '','b', 'c', ''], false],
			[',a,,b,c,', ',', [ null, 'a', '','b', 'c', ''], false],
			[',,a,,b,c,', ',', [ ',', 'a', '','b', 'c', ''], false],
			['abc', '', [ '', 'a', '','b', 'c', ''], false],
			[' a  b c ', ' ', [ '', 'a', '','b', 'c', ''], false],
			['a/b/c', '/', ['a/', '/b/', '/c'], true],
			['/a/b/c/', '/', ['/a/', '/b', '//c/'], true],
			['//a/b/c//', '/', ['//a//', '/b', '//c//'], true],
			['/a/b/c/', '/', ['/', 'a', 'b', 'c', '/'], true],
			['/a/b/c/', '/', ['', 'a', 'b', 'c', ''], true],
			['/a/b/c/', '/', ['', '/a', 'b', 'c/', ''], true],
			['a/b/c', '/', ['a', '', 'b', 'c'], true],
			['a/b/c', '/', ['a', '/', '', 'b', 'c'], true],
		];
	}

	public function isProvider()
	{
		return [
			[true, '/', '/'],
			[false, '/', ' /'],
			[false, '/', '/a'],
			[true, 'foo/*', 'foo/bar/baz'],
			[false, 'foo/*', 'foo/bar/baz', false],
			[true, '*/foo', 'blah/baz/foo'],
			[true, 'foo/*', new HasToString('foo/bar/baz')],
			[false, '/Foo/Bar', '/foo/bar'],
			[true, '/Foo/Bar', '/foo/bar', false, false],
		];
	}

	public function isAnyProvider()
	{
		// Converts single needles to array
		$isData = array_map(function ($array) {
			$array[2] = array($array[2]);
			return $array;
		}, $this->isProvider());

		$data = [
			[true, 'foo/*', ['/', 'foo/']],
			[false, 'foo/*', ['/', 'foo/'], false],
			[true, 'foo/*', ['/', 'foobar', 'foo/bar']],
			[false, 'foo/bar/*', ['/', 'foobar', 'foo/bar']],

			[true, 'foo/*', new Traversable(['/', 'foo/'])],
			[true, 'foo/*', new Traversable(['/', 'foobar', 'foo/bar'])],
			[false, 'foo/bar/*', new Traversable(['/', 'foobar', 'foo/bar'])],
		];

		return array_merge($isData, $data);
	}


	public function isAllProvider()
	{
				// Converts single needles to array
		$isData = array_map(function ($array) {
			$array[2] = array($array[2]);
			return $array;
		}, $this->isProvider());

		$data = [
			[true, 'foo/*', ['foo/bar', 'foo/', 'foo/baz/12']],
			[true, 'foo*', ['foo', 'foobar', 'foo/bar']],
			[true, 'foo/bar/*', ['foo/bar/*', 'foo/bar/', 'foo/bar/barz']],

			[false, 'foo/*', ['foo/bar', 'foo/', 'foo/baz/12', 'foo']],
			[false, 'foo*', ['foo', 'foobar', 'fo', 'foo/bar']],
			[false, 'foo/bar/*', ['foo/bar/*', 'foo/bar', 'foo/bar/barz']],

			[true, 'foo/*', new Traversable(['foo/bar', 'foo/', 'foo/baz/12'])],
			[false, 'foo/*', new Traversable(['foo/bar', 'foo/', 'foo', 'foo/baz/12'])]
		];

		return array_merge($isData, $data);
	}


	public function matchesProvider()
	{
		return [
			[true, '/', '\/'],
			[false, '/', '\/a'],
			[true, 'foo/bar/baz', 'foo\/.*'],
			[true, 'blah/baz/foo', '.*\/foo'],
			[true, 'foo/bar/baz', new HasToString('baz$')],
			[false, '/Foo/Bar', '\/foo\/bar'],
			[true, '/Foo/Bar', '\/foo\/bar', false],
		];
	}


	public function replaceProvider()
	{
		return array(
			array('', '', '', ''),
			array('foo', '\s', '\s', 'foo'),
			array('foo bar', 'foo bar', '', ''),
			array('foo bar', 'foo bar', 'f(o)o', '$1'),
			array('\1 bar', 'foo bar', 'foo', '\1'),
			array('$5 bar', 'foo bar', 'foo', '$5'),
			array('bar', 'foo bar', 'foo ', ''),
			array('far bar', 'foo bar', 'foo', 'far'),
			array('bar bar', 'foo bar foo bar', 'foo ', ''),
			array('', '', '', ''),
			array('f√≤√¥', '\s', '\s', 'f√≤√¥'),
			array('f√≤√¥ b√†≈ô', 'f√≤√¥ b√†≈ô', '', ''),
			array('b√†≈ô', 'f√≤√¥ b√†≈ô', 'f√≤√¥ ', ''),
			array('far b√†≈ô', 'f√≤√¥ b√†≈ô', 'f√≤√¥', 'far'),
			array('b√†≈ô b√†≈ô', 'f√≤√¥ b√†≈ô f√≤√¥ b√†≈ô', 'f√≤√¥ ', ''),
			array('foofoo foofoo', 'foobar foobar', ['foo', 'bar'], ['bar', 'foo']),
		);
	}

	public function replaceFirstProvider()
	{
		$data = [
			['whobar foobar', 'foobar foobar', 'foo', 'who', 1],
			['(?:fooqux foobar', '(?:foobar foobar', 'bar', 'qux', 1],
			['fooqux foobar', 'foobar foobar', 'bar', 'qux', 1],
			['foo/qux? foo/bar?', 'foo/bar? foo/bar?', 'bar?', 'qux?', 1],
			['foo/bar foo/qux?', 'foo/bar foo/bar?', 'bar?', 'qux?', 1],
			['foo foobar', 'foobar foobar', 'bar', '', 1],
			['farb√†≈ô f√≤√¥b√†≈ô', 'f√≤√¥b√†≈ô f√≤√¥b√†≈ô', 'f√≤√¥', 'far', 1],
			['foobar foobar', 'foobar foobar', 'xxx', 'yyy', 0],
			['whobar boobar', 'foobar foobar', 'foo', ['who', 'boo'], 2],
			['whobar boobar', 'foobar foobar', 'foo', ['who', 'boo', 'zoo', 'doo'], 2],
			['foobar boobar foofoo', 'foobar foobar foofoo', 'foo', ['foo', 'boo'], 2],
			['foobar boobar zoobar', 'foobar foobar foofoofoo', 'foo', ['foo', 'boo', 'zoo', 'bar', ''], 5],
			['foobar boobar zoobar', 'foobar foobar foofoofoo', 'foo', ['foo', 'boo', 'zoo', '', 'bar'], 5],
			['foobar boobar foobar', 'foobar foobar foofoofoo', 'foo', ['foo', 'boo', 'foo', 'bar', ''], 5],
			['farb√†≈ô z√≤√¥b√†≈ô z√≤√¥b√†≈ô', 'f√≤√¥b√†≈ô f√≤√¥f√≤√¥ f√≤√¥f√≤√¥b√†≈ô', 'f√≤√¥', ['far', 'z√≤√¥', 'b√†≈ô', '', 'z√≤√¥'], 5],
			['foobar foobar', 'foobar foobar', ['foo','bar'], ['bar', 'foo'], 2],
			['foobar foobar', 'foobar foobar', ['foo','bar' => 'bar'], ['bar', 'foo'], 2],
			['foofoo barbar', 'foobar foobar', ['foo','bar' => 'bar'], ['foo' => ['bar', 'bar'], ['foo', 'foo']], 4],
			['zoozar farboo', 'foobar foobar', ['foo','bar' => 'bar'], ['foo' => ['zoo', 'far'], ['zar', 'boo']], 4],
			['√≤√† √¥b√†≈ô b√†√†≈ôzb√†≈ôz', 'foobar foobar barbar', ['foo', 'bar'],[['√≤', '√¥'], ['√†', 'b√†≈ô', 'b√†√†≈ôz', 'b√†≈ôz' ]], 6],
			['who boobar', 'foobar foobar', ['foo', 'bar' => 'bar'], [['who', 'boo']], 3],
		];

		return $data;
	}

	public function replaceLastProvider()
	{
		$data = [
			['foobar whobar', 'foobar foobar', 'foo', 'who', 1],
			['(?:foobar fooqux', '(?:foobar foobar', 'bar', 'qux', 1],
			['foobar fooqux', 'foobar foobar', 'bar', 'qux', 1],
			['foo/bar? foo/qux?', 'foo/bar? foo/bar?', 'bar?', 'qux?', 1],
			['foo/qux? foo/bar', 'foo/bar? foo/bar', 'bar?', 'qux?', 1],
			['foobar foo', 'foobar foobar', 'bar', '', 1],
			['f√≤√¥b√†≈ô farb√†≈ô', 'f√≤√¥b√†≈ô f√≤√¥b√†≈ô', 'f√≤√¥', 'far', 1],
			['foobar foobar', 'foobar foobar', 'xxx', 'yyy', 0],

			['boobar whobar', 'foobar foobar', 'foo', ['who', 'boo'], 2],
			['boobar whobar', 'foobar foobar', 'foo', ['who', 'boo', 'zoo', 'doo'], 2],
			['foobar foobar boofoo', 'foobar foobar foofoo', 'foo', ['foo', 'boo'], 2],
			['bar barbar zooboofoo', 'foobar foobar foofoofoo', 'foo', ['foo', 'boo', 'zoo', 'bar', ''], 5],
			['barbar bar zooboofoo', 'foobar foobar foofoofoo', 'foo', ['foo', 'boo', 'zoo', '', 'bar'], 5],
			['bar barbar fooboofoo', 'foobar foobar foofoofoo', 'foo', ['foo', 'boo', 'foo', 'bar', ''], 5],
			['z√≤√¥b√†≈ô b√†≈ô z√≤√¥farb√†≈ô', 'f√≤√¥b√†≈ô f√≤√¥f√≤√¥ f√≤√¥f√≤√¥b√†≈ô', 'f√≤√¥', ['far', 'z√≤√¥', 'b√†≈ô', '', 'z√≤√¥'], 5],

			['foobar foobar', 'foobar foobar', ['bar','foo'], ['foo', 'bar'], 2],
			['foobar foobar', 'foobar foobar', ['bar' => 'bar','foo'], ['foo', 'bar'], 2],
			['barbar foofoo', 'foobar foobar', ['foo','bar' => 'bar'], ['foo' => ['bar', 'bar'], ['foo', 'foo']], 4],
			['farboo zoozar', 'foobar foobar', ['foo', 'bar'], [['zoo', 'far'], ['zar', 'boo']], 4],
			['√¥b√†≈ôz √≤b√†√†≈ôz b√†≈ô√†', 'foobar foobar barbar', ['foo', 'bar'],[['√≤', '√¥'], ['√†', 'b√†≈ô', 'b√†√†≈ôz', 'b√†≈ôz' ]], 6],
			['boobar who', 'foobar foobar', ['foo', 'bar'], [['who', 'boo']], 3],
		];

		return $data;
	}

	public function stripProvider()
	{
		return [
			['foo   bar', '  foo   bar  '],
			[' foo   bar ', '  foo   bar  ', null, 1],
			['foo bar', 'xxxxxfoo barxxx', 'x'],
			['xfoo x bar', 'xxxfoo x barx', 'x', 2],
			['fooxbarx', 'xxfooxbarxxx', 'xx'],
			['xxfooxbarx', 'xxxxfooxbarxxx', 'xx', 1],
			['foo bar', "\n\t foo bar \n\t"],
			['f√≤√¥   b√†≈ô', '  f√≤√¥   b√†≈ô  '],
			[" foo bar \t\n", "\n\t foo bar \t\n\n\t", "\n\t"],
			['f√≤√¥ b√†≈ô', "\n\t f√≤√¥ b√†≈ô \n\t"],
			['f√≤√¥', '‚Åü‚Åüf√≤√¥‚Åü‚Åü'],
			['foo bar', 'xxxXxfoo barXxx', 'x', -1, false],
			['Xxfoo barX', 'xxxXxfoo barXxx', 'x'],
			array('-foo-bar-cba', 'abc-foo-bar-cba', 'abc'),
			array('ac-foo-bar-', 'abcabcac-foo-bar-abcabc', 'abc'),
		];
	}

	public function stripLeftProvider()
	{
		return [
			['foo   bar  ', '  foo   bar  '],
			[' foo   bar  ', '  foo   bar  ', null, 1],
			['foo barxxx', 'xxxxxfoo barxxx', 'x'],
			['xfoo x barxx', 'xxxfoo x barxx', 'x', 2],
			['fooxbarxx', 'xxxxfooxbarxx', 'xx'],
			['xxfooxbarx', 'xxxxfooxbarx', 'xx', 1],
			["foo bar \n\t", "\n\t foo bar \n\t"],
			['f√≤√¥   b√†≈ô  ', '  f√≤√¥   b√†≈ô  '],
			["\t\n foo bar \n\t", "\n\t\t\n foo bar \n\t", "\n\t"],
			["f√≤√¥ b√†≈ô \n\t", "\n\t f√≤√¥ b√†≈ô \n\t"],
			['f√≤√¥‚Åü‚Åü', '‚Åü‚Åüf√≤√¥‚Åü‚Åü'],
			['foo barXx', 'xxxXxfoo barXx', 'x', -1, false],
			['Xxfoo barXx', 'xxxXxfoo barXx', 'x'],
			array('-foo-bar-abc', 'abc-foo-bar-abc', 'abc'),
			array('ac-foo-bar', 'abcabcac-foo-bar', 'abc'),
		];
	}


	public function stripRightProvider()
	{
		return [
			['  foo   bar', '  foo   bar  '],
			['  foo   bar ', '  foo   bar  ', null, 1],
			['xxfoo bar', 'xxfoo barxxxx', 'x'],
			['xfoo x barx', 'xfoo x barxxx', 'x', 2],
			['fooxbarx', 'fooxbarxxxxx', 'xx'],
			['fooxbarxx', 'fooxbarxxxx', 'xx', 1],
			["\n\t foo bar", "\n\t foo bar \n\t"],
			['  f√≤√¥   b√†≈ô', '  f√≤√¥   b√†≈ô  '],
			["\n\t foo bar \t\n", "\n\t foo bar \t\n\n\t", "\n\t"],
			["\n\t f√≤√¥ b√†≈ô", "\n\t f√≤√¥ b√†≈ô \n\t"],
			['‚Åü‚Åüf√≤√¥', '‚Åü‚Åüf√≤√¥‚Åü‚Åü'],
			['foo bar', 'foo barxXx', 'x', -1, false],
			['foo barxX', 'foo barxXxx', 'x'],
			array('foo-bar-', 'foo-bar-abc', 'abc'),
			array('foo-bar-ac', 'foo-bar-acabcabc', 'abc'),
		];
	}



	public function trimProvider()
	{
		return array(
			array('foo   bar', '  foo   bar  '),
			array('foo bar', ' foo bar'),
			array('foo bar', 'foo bar '),
			array('foo bar', "\n\t foo bar \n\t"),
			array('f√≤√¥   b√†≈ô', '  f√≤√¥   b√†≈ô  '),
			array('f√≤√¥ b√†≈ô', ' f√≤√¥ b√†≈ô'),
			array('f√≤√¥ b√†≈ô', 'f√≤√¥ b√†≈ô '),
			array(' foo bar ', "\n\t foo bar \n\t", "\n\t"),
			array('f√≤√¥ b√†≈ô', "\n\t f√≤√¥ b√†≈ô \n\t"),
			array('f√≤√¥', '‚ÄØf√≤√¥‚ÄØ'), // narrow no-break space (U+202F)
			array('f√≤√¥', '‚Åü‚Åüf√≤√¥‚Åü‚Åü'), // medium mathematical space (U+205F)
			array('f√≤√¥', '‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ääf√≤√¥'), // spaces U+2000 to U+200A
			array('fooxbar', 'xxfooxbarxxx', 'x'),
			array('fooxbarx', 'xxfooxbarxxx', 'x', 2),
			array('-foo-bar-', 'abc-foo-bar-cba', 'abc'),
			array('-foo-bar-', 'aBc-foo-bar-Cba', 'abc', -1, false),
			array('Bc-foo-bar-C', 'aBc-foo-bar-Cba', 'abc', -1, true),
			array('-foo-bar-', 'cabac-foo-bar-bacbac', 'abc'),
		);
	}


	public function trimLeftProvider()
	{
		return array(
			array('foo   bar  ', '  foo   bar  '),
			array('foo bar', ' foo bar'),
			array('foo bar ', 'foo bar '),
			array("foo bar \n\t", "\n\t foo bar \n\t"),
			array('f√≤√¥   b√†≈ô  ', '  f√≤√¥   b√†≈ô  '),
			array('f√≤√¥ b√†≈ô', ' f√≤√¥ b√†≈ô'),
			array('f√≤√¥ b√†≈ô ', 'f√≤√¥ b√†≈ô '),
			array('foo bar-', '--foo bar-', '-'),
			array('f√≤√¥ b√†≈ô', '√≤√≤f√≤√¥ b√†≈ô', '√≤'),
			array("f√≤√¥ b√†≈ô \n\t", "\n\t f√≤√¥ b√†≈ô \n\t"),
			array('f√≤√¥‚ÄØ', '‚ÄØf√≤√¥‚ÄØ'), // narrow no-break space (U+202F)
			array('f√≤√¥‚Åü‚Åü', '‚Åü‚Åüf√≤√¥‚Åü‚Åü'), // medium mathematical space (U+205F)
			array('f√≤√¥', '‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ääf√≤√¥'), // spaces U+2000 to U+200A
			array('-foo-bar', 'abc-foo-bar', 'abc'),
			array('-foo-bar', 'bcaCAB-foo-bar', 'abc', -1, false),
			array('CAB-foo-bar', 'bcaCAB-foo-bar', 'abc', -1, true),
		);
	}


	public function trimRightProvider()
	{
		return array(
			array('  foo   bar', '  foo   bar  '),
			array('foo bar', 'foo bar '),
			array(' foo bar', ' foo bar'),
			array("\n\t foo bar", "\n\t foo bar \n\t"),
			array('  f√≤√¥   b√†≈ô', '  f√≤√¥   b√†≈ô  '),
			array('f√≤√¥ b√†≈ô', 'f√≤√¥ b√†≈ô '),
			array(' f√≤√¥ b√†≈ô', ' f√≤√¥ b√†≈ô'),
			array('foo bar', 'foo bar--', '-'),
			array('f√≤√¥ b√†≈ô', 'f√≤√¥ b√†≈ô√≤√≤', '√≤', 'UTF-8'),
			array("\n\t f√≤√¥ b√†≈ô", "\n\t f√≤√¥ b√†≈ô \n\t", null, 'UTF-8'),
			array('‚ÄØf√≤√¥', '‚ÄØf√≤√¥‚ÄØ', null, 'UTF-8'), // narrow no-break space (U+202F)
			array('‚Åü‚Åüf√≤√¥', '‚Åü‚Åüf√≤√¥‚Åü‚Åü', null, 'UTF-8'), // medium mathematical space (U+205F)
			array('f√≤√¥', 'f√≤√¥‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää', null, 'UTF-8'), // spaces U+2000 to U+200A
			array('foo-bar', 'foo-barccba', 'abc'),
			array('foo-bar-', 'foo-bar-CABbcacaa', 'abc', -1, false),
			array('foo-bar-CAB', 'foo-bar-CABcab', 'abc', -1, true),
		);
	}

	public function wordsProvider()
	{
		return array(
			array('Test foo bar', 'Test foo bar', 10),
			array('Test foo', 'Test foo bar', 2),
			array('Test foo>>>', 'Test foo bar', 2, '>>>'),
			array('Test...', 'Test foo bar', 1, '...'),
			array('Test f√≤√¥', 'Test f√≤√¥ b√†≈ô', 2),
			array('Test...', 'Test f√≤√¥ b√†≈ô', 1, '...'),
			array('Test f√≤√¥ b√†≈ô', 'Test f√≤√¥ b√†≈ô', 4, 'œ∞œ∞', 'UTF-8'),
			array('Test f√≤√¥œ∞œ∞', 'Test f√≤√¥ b√†≈ô', 2, 'œ∞œ∞'),
			array('What are your plans today?', 'What are your plans today?', 5, '...'),
			array('What are your...', 'What are your plans today?', 3, '...'),
		);
	}


	public function lcfirstProvider()
	{
		return array(
			array('test', 'Test'),
			array('test', 'test'),
			array('1a', '1a'),
			array('œÉ test', 'Œ£ test', 'UTF-8'),
			array(' Œ£ test', ' Œ£ test', 'UTF-8')
		);
	}


	public function lowerProvider()
	{
		return array(
			array('foo bar', 'FOO BAR'),
			array(' foo_bar ', ' FOO_bar '),
			array('f√≤√¥ b√†≈ô', 'F√í√î B√Ä≈ò', 'UTF-8'),
			array(' f√≤√¥_b√†≈ô ', ' F√í√î_b√†≈ô ', 'UTF-8'),
			array('Œ±œÖœÑŒøŒ∫ŒØŒΩŒ∑œÑŒø', 'ŒëŒ•Œ§ŒüŒöŒäŒùŒóŒ§Œü', 'UTF-8'),
		);
	}


	public function titlecaseProvider()
	{
		return array(
			array('Foo Bar', 'foo bar'),
			array(' Foo_Bar ', ' foo_bar '),
			array('F√≤√¥ B√†≈ô', 'f√≤√¥ b√†≈ô', 'UTF-8'),
			array(' F√≤√¥_B√†≈ô ', ' f√≤√¥_b√†≈ô ', 'UTF-8'),
			array('ŒëœÖœÑŒøŒ∫ŒØŒΩŒ∑œÑŒø ŒëœÖœÑŒøŒ∫ŒØŒΩŒ∑œÑŒø', 'Œ±œÖœÑŒøŒ∫ŒØŒΩŒ∑œÑŒø Œ±œÖœÑŒøŒ∫ŒØŒΩŒ∑œÑŒø', 'UTF-8'),
		);
	}

	public function upperProvider()
	{
		return array(
			array('FOO BAR', 'foo bar'),
			array(' FOO_BAR ', ' FOO_bar '),
			array('F√í√î B√Ä≈ò', 'f√≤√¥ b√†≈ô', 'UTF-8'),
			array(' F√í√î_B√Ä≈ò ', ' F√í√î_b√†≈ô ', 'UTF-8'),
			array('ŒëŒ•Œ§ŒüŒöŒäŒùŒóŒ§Œü', 'Œ±œÖœÑŒøŒ∫ŒØŒΩŒ∑œÑŒø', 'UTF-8'),
		);
	}

	public function ucfirstProvider()
	{
		return array(
			array('Test', 'Test'),
			array('Test', 'test'),
			array('1a', '1a'),
			array('Œ£ test', 'œÉ test', 'UTF-8'),
			array(' œÉ test', ' œÉ test', 'UTF-8')
		);
	}


	public function camelProvider()
	{
		return array(
			array('camelCase', 'CamelCase'),
			array('camelCase', 'Camel-Case'),
			array('camelCase', 'camel case'),
			array('camelCase', 'camel -case'),
			array('camelCase', 'camel - case'),
			array('camelCase', 'camel_case'),
			array('camelCTest', 'camel c test'),
			array('stringWith1Number', 'string_with1number'),
			array('stringWith22Numbers', 'string-with-2-2 numbers'),
			array('dataRate', 'data_rate'),
			array('backgroundColor', 'background-color'),
			array('yesWeCan', 'yes_we_can'),
			array('mozSomething', '-moz-something'),
			array('carSpeed', '_car_speed_'),
			array('serveHTTP', 'ServeHTTP'),
			array('1Camel2Case', '1camel2case'),
			array('camelŒ£ase', 'camel œÉase', 'UTF-8'),
			array('œÉœÑŒ±ŒΩŒπŒªCase', 'Œ£œÑŒ±ŒΩŒπŒª case', 'UTF-8'),
			array('œÉamelCase', 'œÉamel  Case', 'UTF-8'),
		);
	}


	public function slugifyProvider()
	{
		return array(
			array('foo-bar', ' foo  bar '),
			array('foo-bar', 'foo -.-"-...bar'),
			array('another-foo-bar', 'another..& foo -.-"-...bar'),
			array('foo-dbar', " Foo d'Bar "),
			array('a-string-with-dashes', 'A string-with-dashes'),
			array('using-strings-like-foo-bar', 'Using strings like f√≤√¥ b√†≈ô'),
			array('numbers-1234', 'numbers 1234'),
			array('perevirka-ryadka', '–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—è–¥–∫–∞'),
			array('bukvar-s-bukvoy-y', '–±—É–∫–≤–∞—Ä—å —Å –±—É–∫–≤–æ–π —ã'),
			array('podekhal-k-podezdu-moego-doma', '–ø–æ–¥—ä–µ—Ö–∞–ª –∫ –ø–æ–¥—ä–µ–∑–¥—É –º–æ–µ–≥–æ –¥–æ–º–∞'),
			array('foo:bar:baz', 'Foo bar baz', ':'),
			array('a_string_with_underscores', 'A_string with_underscores', '_'),
			array('a_string_with_dashes', 'A string-with-dashes', '_'),
			array('a\string\with\dashes', 'A string-with-dashes', '\\'),
			array('an_odd_string', '--   An odd__   string-_', '_')
		);
	}


	public function snakeProvider()
	{
		return array(
			array('test_case', 'testCase'),
			array('test_case', 'Test-Case'),
			array('test_case', 'test case'),
			array('test_case', 'test -case'),
			array('_test_case', '-test - case'),
			array('test_case', 'test_case'),
			array('test_c_test', '  test c test'),
			array('test_u_case', 'TestUCase'),
			array('test_c_c_test', 'TestCCTest'),
			array('test-c-c-test', 'TestCCTest', '-'),
			array('string_with1number', 'string_with1number'),
			array('string_with_2_2_numbers', 'String-with_2_2 numbers'),
			array('1test2case', '1test2case'),
			array('yes_we_can', 'yesWeCan'),
			array('test_œÉase', 'test Œ£ase', '_', 'UTF-8'),
			array('œÉœÑŒ±ŒΩŒπŒª_case', 'Œ£œÑŒ±ŒΩŒπŒª case', '_','UTF-8'),
			array('œÉash_case', 'Œ£ash  Case', '_','UTF-8')
		);
	}

	public function titleizeProvider()
	{
		$ignore = array('at', 'by', 'for', 'in', 'of', 'on', 'out', 'to', 'the');

		return array(
			array('Title Case', 'TITLE CASE'),
			array('Testing The Method', 'testing the method'),
			array('Testing the Method', 'testing the method', $ignore),
			array('I Like to Watch Dvds at Home', 'i like to watch DVDs at home', $ignore),
			array('ŒòŒ± ŒâŒ∏ŒµŒªŒ± ŒùŒ± Œ¶œçŒ≥ŒµŒπ', '  ŒòŒ± ŒÆŒ∏ŒµŒªŒ± ŒΩŒ± œÜœçŒ≥ŒµŒπ  ', [], 'UTF-8')
		);
	}


	public function studlyProvider()
	{
		return array(
			array('CamelCase', 'camelCase'),
			array('CamelCase', 'Camel-Case'),
			array('CamelCase', 'camel case'),
			array('CamelCase', 'camel -case'),
			array('CamelCase', 'camel - case'),
			array('CamelCase', 'camel_case'),
			array('CamelCTest', 'camel c test'),
			array('StringWith1Number', 'string_with1number'),
			array('StringWith22Numbers', 'string-with-2-2 numbers'),
			array('1Camel2Case', '1camel2case'),
			array('CamelŒ£ase', 'camel œÉase', 'UTF-8'),
			array('Œ£œÑŒ±ŒΩŒπŒªCase', 'œÉœÑŒ±ŒΩŒπŒª case', 'UTF-8'),
			array('Œ£amelCase', 'Œ£amel  Case', 'UTF-8')
		);
	}


	/**
	 * Singular & Plural test data. Returns an array of sample words.
	 *
	 * @return array
	 */
	public function singularVsPluralWordsProvider()
	{
	    // In the format array('singular', 'plural')
		return array(
			array('', ''),
			array('Alias', 'Aliases'),
			array('alumnus', 'alumni'),
			array('analysis', 'analyses'),
			array('aquarium', 'aquaria'),
			array('arch', 'arches'),
			array('atlas', 'atlases'),
			array('axe', 'axes'),
			array('baby', 'babies'),
			array('bacillus', 'bacilli'),
			array('bacterium', 'bacteria'),
			array('bureau', 'bureaus'),
			array('bus', 'buses'),
			array('Bus', 'Buses'),
			array('cactus', 'cacti'),
			array('cafe', 'cafes'),
			array('calf', 'calves'),
			array('categoria', 'categorias'),
			array('chateau', 'chateaux'),
			array('cherry', 'cherries'),
			array('child', 'children'),
			array('church', 'churches'),
			array('circus', 'circuses'),
			array('city', 'cities'),
			array('cod', 'cod'),
			array('cookie', 'cookies'),
			array('copy', 'copies'),
			array('crisis', 'crises'),
			array('criterion', 'criteria'),
			array('curriculum', 'curricula'),
			array('curve', 'curves'),
			array('deer', 'deer'),
			array('demo', 'demos'),
			array('dictionary', 'dictionaries'),
			array('domino', 'dominoes'),
			array('dwarf', 'dwarves'),
			array('echo', 'echoes'),
			array('elf', 'elves'),
			array('emphasis', 'emphases'),
			array('family', 'families'),
			array('fax', 'faxes'),
			array('fish', 'fish'),
			array('flush', 'flushes'),
			array('fly', 'flies'),
			array('focus', 'foci'),
			array('foe', 'foes'),
			array('food_menu', 'food_menus'),
			array('FoodMenu', 'FoodMenus'),
			array('foot', 'feet'),
			array('fungus', 'fungi'),
			array('glove', 'gloves'),
			array('half', 'halves'),
			array('hero', 'heroes'),
			array('hippopotamus', 'hippopotami'),
			array('hoax', 'hoaxes'),
			array('house', 'houses'),
			array('human', 'humans'),
			array('identity', 'identities'),
			array('index', 'indices'),
			array('iris', 'irises'),
			array('kiss', 'kisses'),
			array('knife', 'knives'),
			array('leaf', 'leaves'),
			array('life', 'lives'),
			array('loaf', 'loaves'),
			array('man', 'men'),
			array('matrix', 'matrices'),
			array('matrix_row', 'matrix_rows'),
			array('medium', 'media'),
			array('memorandum', 'memoranda'),
			array('menu', 'menus'),
			array('Menu', 'Menus'),
			array('mess', 'messes'),
			array('moose', 'moose'),
			array('motto', 'mottoes'),
			array('mouse', 'mice'),
			array('neurosis', 'neuroses'),
			array('news', 'news'),
			array('NodeMedia', 'NodeMedia'),
			array('nucleus', 'nuclei'),
			array('oasis', 'oases'),
			array('octopus', 'octopuses'),
			array('pass', 'passes'),
			array('person', 'people'),
			array('plateau', 'plateaux'),
			array('potato', 'potatoes'),
			array('powerhouse', 'powerhouses'),
			array('quiz', 'quizzes'),
			array('radius', 'radii'),
			array('reflex', 'reflexes'),
			array('roof', 'roofs'),
			array('runner-up', 'runners-up'),
			array('scarf', 'scarves'),
			array('scratch', 'scratches'),
			array('series', 'series'),
			array('sheep', 'sheep'),
			array('shelf', 'shelves'),
			array('shoe', 'shoes'),
			array('son-in-law', 'sons-in-law'),
			array('species', 'species'),
			array('splash', 'splashes'),
			array('spy', 'spies'),
			array('stimulus', 'stimuli'),
			array('stitch', 'stitches'),
			array('story', 'stories'),
			array('syllabus', 'syllabi'),
			array('tax', 'taxes'),
			array('terminus', 'termini'),
			array('thesis', 'theses'),
			array('thief', 'thieves'),
			array('tomato', 'tomatoes'),
			array('tooth', 'teeth'),
			array('tornado', 'tornadoes'),
			array('try', 'tries'),
			array('vertex', 'vertices'),
			array('virus', 'viri'),
			array('volcano', 'volcanoes'),
			array('wash', 'washes'),
			array('watch', 'watches'),
			array('wave', 'waves'),
			array('wharf', 'wharves'),
			array('wife', 'wives'),
			array('woman', 'women'),
			);
	}


}