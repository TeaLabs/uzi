<?php
namespace Tea\Tests\Uzi\Providers;

use Tea\Uzi\Str;
use Tea\Tests\Uzi\Specimens\Object;
use Tea\Tests\Uzi\Specimens\Traversable;
use Tea\Tests\Uzi\Specimens\HasToString;

trait StrProviders
{

	public function asciiProvider()
	{
		return [
			['foo bar', 'f√≤√¥ b√†≈ô'],
			[' TEST ', ' ≈§√â≈ö≈¢ '],
			['f = z = 3', 'œÜ = ≈∫ = 3'],
			['perevirka', '–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞'],
			['lysaya gora', '–ª—ã—Å–∞—è –≥–æ—Ä–∞'],
			['shchuka', '—â—É–∫–∞'],
			['', 'Êº¢Â≠ó'],
			['xin chao the gioi', 'xin ch√†o th·∫ø gi·ªõi'],
			['XIN CHAO THE GIOI', 'XIN CH√ÄO TH·∫æ GI·ªöI'],
			['dam phat chet luon', 'ƒë·∫•m ph√°t ch·∫øt lu√¥n'],
			[' ', '¬†'], // no-break space (U+00A0)
			['           ', '‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää'], // spaces U+2000 to U+200A
			[' ', '‚ÄØ'], // narrow no-break space (U+202F)
			[' ', '‚Åü'], // medium mathematical space (U+205F)
			[' ', '„ÄÄ'], // ideographic space (U+3000)
			['', 'êçâ'], // some uncommon, unsupported character (U+10349)
			['êçâ', 'êçâ', false],
		];
	}

	public function beginProvider()
	{
		return [
			['¬© foo', '¬©¬©¬© foo', '¬©'],
			['~¬©¬©~foo', '¬©¬©~foo', '~'],
			['/foo/bar/', 'foo/bar/', '/'],
			['/foo/bar/', 'foo/bar/', '/', false],
			['/foo/bar/', '//foo/bar/', '/'],
			['\/foo\/bar/', '\/\/foo\/bar/', '\/'],
			['/foo/bar/', '/foo/bar/', '/', false],
			['//foo/bar/', '//foo/bar/', '/', false],
			['xxxfooxbarx', 'xxxxxfooxbarx', 'xx'],
			['+-+foo+bar-', '+-+-+-+foo+bar-', '+-'],
		];
	}


	public function camelProvider()
	{
		return [
			['camelCase', 'CamelCase'],
			['camelCase', 'Camel-Case'],
			['camelCase', 'camel case'],
			['camelCase', 'camel -case'],
			['camelCase', 'camel - case'],
			['camelCase', 'camel_case'],
			['camelCTest', 'camel c test'],
			['stringWith1Number', 'string_with1number'],
			['stringWith22Numbers', 'string-with-2-2 numbers'],
			['1Camel2Case', '1camel2case'],
			['camelŒ£ase', 'camel œÉase', 'UTF-8'],
			['œÉœÑŒ±ŒΩŒπŒªCase', 'Œ£œÑŒ±ŒΩŒπŒª case', 'UTF-8'],
			['œÉamelCase', 'œÉamel  Case', 'UTF-8']
		];
	}

	public function compactProvider()
	{
		return [
			['foo + bar', '  foo   +   bar   '],
			["foo bar foo bar", "    \nfoo    bar   \nfoo   bar    \n "],
			['Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ', '   Œü     œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ  ', ' ', 'UTF-8'],
			['', '‚ÄØ', ' ', 'UTF-8'],
			['x', '‚ÄÄ‚ÄÅ‚ÄÇ‚ÄÉ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää', 'x', 'UTF-8']
		];
	}

	public function containsProvider()
	{
		return [
			// Single needle
			// 1. Pain strings
			[true, 'Str contains foo bar', 'foo bar'],
			[true, '12398!@(*%!@# @!%#*&^%',  ' @!%#*&^%'],
			[true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', 'œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ', true,'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√•¬¥¬•¬©', true, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√•Àö ‚àÜ', true, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√∏≈ì¬¨', true, 'UTF-8'],
			[false, 'Str contains foo bar', 'Foo bar'],
			[false, 'Str contains foo bar', 'foobar'],
			[false, 'Str contains foo bar', 'foo bar '],
			[false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', true, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', ' √ü√•Àö', true, 'UTF-8'],
			[true, 'Str contains foo bar', 'Foo bar', false],
			[true, '12398!@(*%!@# @!%#*&^%',  ' @!%#*&^%', false],
			[true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', 'Œ£Œ•ŒìŒìŒ°ŒëŒ¶ŒàŒëŒ£', false, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√Ö¬¥¬•¬©', false, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√ÖÀö ‚àÜ', false, 'UTF-8'],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', '√ò≈í¬¨', false, 'UTF-8'],
			[false, 'Str contains foo bar', 'foobar', false],
			[false, 'Str contains foo bar', 'foo bar ', false],
			[false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', false, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', ' √ü√ÖÀö', false, 'UTF-8'],

			// 2. Str objects.
			[true, 'Str contains foo bar', new Str('foo bar')],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new Str('√∏≈ì¬¨', 'UTF-8'), true, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new Str(' √ü√•Àö', 'UTF-8'), true, 'UTF-8'],

			// 3. Objects implementing __toString()
			[true, 'Str contains foo bar', new HasToString('foo bar')],
			[true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new HasToString('√∏≈ì¬¨', 'UTF-8'), true, 'UTF-8'],
			[false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new HasToString(' √ü√•Àö', 'UTF-8'), true, 'UTF-8'],

			// Multiple needles
			// 1. Arrays
			array(false, 'Str contains foo bar', array()),
			array(true, 'Str contains foo bar', array('foo', 'bar')),
			array(true, '12398!@(*%!@# @!%#*&^%', array(' @!%#*', '&^%')),
			array(true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('œÉœÖŒ≥Œ≥œÅ', 'Œ±œÜŒ≠Œ±œÇ'), 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√•¬¥¬•', '¬©'), true, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√•Àö ', '‚àÜ'), true, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√∏≈ì', '¬¨'), true, 'UTF-8'),
			array(false, 'Str contains foo bar', array('Foo', 'Bar')),
			array(false, 'Str contains foo bar', array('foobar', 'bar ')),
			array(false, 'Str contains foo bar', array('foo bar ', '  foo')),
			array(false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜ '), true, 'UTF-8'),
			array(false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array(' √ü√•Àö', ' √ü '), true, 'UTF-8'),
			array(true, 'Str contains foo bar', array('Foo bar', 'bar'), false),
			array(true, '12398!@(*%!@# @!%#*&^%', array(' @!%#*&^%', '*&^%'), false),
			array(true, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('Œ£Œ•ŒìŒìŒ°ŒëŒ¶ŒàŒëŒ£', 'ŒëŒ¶ŒàŒë'), false, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√Ö¬¥¬•¬©', '¬•¬©'), false, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√ÖÀö ‚àÜ', ' ‚àÜ'), false, 'UTF-8'),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array('√ò≈í¬¨', '≈í'), false, 'UTF-8'),
			array(false, 'Str contains foo bar', array('foobar', 'none'), false),
			array(false, 'Str contains foo bar', array('foo bar ', ' ba '), false),
			array(false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', array('  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', ' œÅŒ±œÜŒ≠ '), false, 'UTF-8'),
			array(false, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', array(' √ü√ÖÀö', ' √ÖÀö '), false, 'UTF-8'),

			// 2 .Traversable Objects
			array(true, 'Str contains foo bar', new Traversable(array('foo', 'bar')) ),
			array(true, '√•¬¥¬•¬©¬®ÀÜ√ü√•Àö ‚àÜ‚àÇÀô¬©√•‚àë¬•√∏≈ì¬¨', new Traversable(array('√•¬¥¬•', '¬©')), true, 'UTF-8'),
			array(false, 'Œü œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ŒµŒØœÄŒµ', new Traversable(array('  œÉœÖŒ≥Œ≥œÅŒ±œÜŒ≠Œ±œÇ ', '  œÉœÖŒ≥Œ≥œÅŒ±œÜ ')), true, 'UTF-8'),
			array(false, 'Str contains foo bar', new Traversable(array('foo bar ', ' ba ')), false),
		];
	}


	public function containsAnyProvider()
	{
		// Converts single needles to array
		return array_map(function ($array) {
			if(!is_array($array[2]) && !($array[2] instanceof Traversable))
				$array[2] = array($array[2]);

			return $array;
		}, $this->containsProvider());

	}

	public function containsErrorProvider()
	{
		return [
			['foo bar', new Object('foo')]
		];

	}

	public function endsWithProvider()
	{
		return [

			// Single needle
			// 1. Pain strings
			array(true, 'foo bars', 'o bars'),
			array(true, 'FOO bars', 'o bars', false),
			array(true, 'FOO bars', 'o BARs', false),
			array(true, 'F√í√î b√†≈ôs', '√¥ b√†≈ôs', false, 'UTF-8'),
			array(true, 'f√≤√¥ b√†≈ôs', '√¥ B√Ä≈òs', false, 'UTF-8'),
			array(false, 'foo bar', 'foo'),
			array(false, 'foo bar', 'foo bars'),
			array(false, 'FOO bar', 'foo bars'),
			array(false, 'FOO bars', 'foo BARS'),
			array(false, 'F√í√î b√†≈ôs', 'f√≤√¥ b√†≈ôs', true, 'UTF-8'),
			array(false, 'f√≤√¥ b√†≈ôs', 'B√Ä≈òS', true, 'UTF-8'),
			// 2. Str objects
			array(true, 'foo bars', new Str('o bars')),
			array(true, 'FOO bars', new Str('o BARs'), false),
			array(true, 'F√í√î b√†≈ôs', new Str('√¥ b√†≈ôs'), false, 'UTF-8'),
			array(true, 'F√í√î B√Ä≈òs', new Str('b√†≈ôs'), false, 'UTF-8'),
			array(false, 'foo bar', new Str('foo')),
			array(false, 'FOO bars', new Str('BARS')),
			array(false, 'F√í√î B√Ä≈òs', new Str('b√†≈ôs'), true, 'UTF-8'),
			// 3. Objects implementing __toString()
			array(true, 'foo bars', new HasToString('o bars')),
			array(true, 'FOO bars', new HasToString('o BARs'), false),
			array(true, 'F√í√î b√†≈ôs', new HasToString('√¥ b√†≈ôs'), false, 'UTF-8'),
			array(true, 'F√í√î B√Ä≈òs', new HasToString('b√†≈ôs'), false, 'UTF-8'),
			array(false, 'foo bar', new HasToString('foo')),
			array(false, 'FOO bars', new HasToString('BARS')),
			array(false, 'F√í√î B√Ä≈òs', new HasToString('b√†≈ôs'), true, 'UTF-8'),
			// Multiple needles
			// 1. Arrays
			[true, 'foo bars', ['foo','o bars']],
			[true, 'FOO bars', ['o bars'], false],
			[true, 'FOO bars', ['b', 'o BARs'], false],
			[true, 'F√í√î b√†≈ôs', ['b√†≈ô', '√¥ b√†≈ôs'], false, 'UTF-8'],
			[true, 'f√≤√¥ b√†≈ôs', ['√¥ B√Ä≈òs'], false, 'UTF-8'],
			[false, 'foo bar', []],
			[false, 'foo bar', ['BAR', 'foo']],
			[false, 'foo bar', ['foo bars']],
			[false, 'FOO bar', ['foo bars']],
			[false, 'FOO bars', ['foo BARS']],
			[false, 'F√í√î b√†≈ôs', ['f√≤√¥ b√†≈ôs'], true, 'UTF-8'],
			[false, 'f√≤√¥ b√†≈ôs', ['B√Ä≈òS'], true, 'UTF-8'],
			[true, 'F√í√î b√†≈ôs', ['b√†≈ô', '√¥ b√†≈ôs'], false, 'UTF-8'],
			[true, 'f√≤√¥ b√†≈ôs', ['√¥ B√Ä≈òs'], false, 'UTF-8'],
			// 2 .Traversable Objects
			[false, 'F√í√î b√†≈ôs', new Traversable('f√≤√¥ b√†≈ôs'), true, 'UTF-8'],
			[false, 'f√≤√¥ b√†≈ôs', new Traversable('B√Ä≈òS'), true, 'UTF-8'],
			[true, 'F√í√î b√†≈ôs', new Traversable(['b√†≈ô', '√¥ b√†≈ôs']), false, 'UTF-8'],
			[true, 'f√≤√¥ b√†≈ôs', new Traversable('√¥ B√Ä≈òs'), false, 'UTF-8'],
		];
	}

	public function finishProvider()
	{
		return [
			['foo¬©', 'foo', '¬©'],
			['foo¬©', 'foo¬©¬©¬©', '¬©'],
			['foo~¬©¬©~', 'foo~¬©¬©', '~'],
			['/foo/bar/', '/foo/bar', '/'],
			['/foo/bar/', '/foo/bar', '/', false],
			['/foo/bar/', '/foo/bar//', '/'],
			['/foo/bar//', '/foo/bar//', '/', false],
			['xfooxbarxxx', 'xfooxbarxxxxx', 'xx'],
			['+-foo+bar++-', '+-foo+bar++-+-+-', '+-'],
		];
	}

	public function minifyProvider()
	{
		return [
			[' foo bar ', '   foo    bar   '],
			[" foo bar foo bar ", "  foo    bar   \n  foo   bar   "]
		];
	}


	public function trimProvider()
	{
		return [
			['foo   bar', '  foo   bar  '],
			[' foo   bar ', '  foo   bar  ', '', false, 1],
			['foo bar', 'xxfoo barx', 'x'],
			['xfoo x bar', 'xxxfoo x barx', 'x', false, 2],
			['fooxbarx', 'xxfooxbarxxx', 'xx', true],
			['xxfooxbarx', 'xxxxfooxbarxxx', 'xx', true, 1],
			['foo bar', "\n\t foo bar \n\t"],
			['f√≤√¥   b√†≈ô', '  f√≤√¥   b√†≈ô  '],
			[' foo bar ', "\n\t foo bar \n\t", "\n\t"],
			['f√≤√¥ b√†≈ô', "\n\t f√≤√¥ b√†≈ô \n\t", null, false, -1,'UTF-8'],
			['f√≤√¥', '‚Åü‚Åüf√≤√¥‚Åü‚Åü', null, false, -1,'UTF-8']
		];
	}

	public function trimLeftProvider()
	{
		return [
			['foo   bar  ', '  foo   bar  '],
			[' foo   bar  ', '  foo   bar  ', '', false, 1],
			['foo barx', 'xxfoo barx', 'x'],
			['xfoo x barxx', 'xxxfoo x barxx', 'x', false, 2],
			['xfooxbarxx', 'xxxfooxbarxx', 'xx', true],
			['xxfooxbarx', 'xxxxfooxbarx', 'xx', true, 1],
			["foo bar \n\t", "\n\t foo bar \n\t"],
			['f√≤√¥   b√†≈ô  ', '  f√≤√¥   b√†≈ô  '],
			[" foo bar \n\t", "\n\t foo bar \n\t", "\n\t"],
			["f√≤√¥ b√†≈ô \n\t", "\n\t f√≤√¥ b√†≈ô \n\t", null, false, -1,'UTF-8'],
			['f√≤√¥‚Åü‚Åü', '‚Åü‚Åüf√≤√¥‚Åü‚Åü', null, false, -1,'UTF-8']
		];
	}

	public function trimRightProvider()
	{
		return [
			['foo   bar', 'foo   bar  '],
			['  foo   bar ', '  foo   bar  ', '', false, 1],
			['xfoo bar', 'xfoo barxx', 'x'],
			['xfoo x barx', 'xfoo x barxxx', 'x', false, 2],
			['xfooxbar', 'xfooxbarxxxx', 'xx', true],
			['xxfooxbarxx', 'xxfooxbarxxxx', 'xx', true, 1],
			["\n\t foo bar", "\n\t foo bar \n\t"],
			['  f√≤√¥   b√†≈ô', '  f√≤√¥   b√†≈ô  '],
			["\n\t foo bar ", "\n\t foo bar \n\t", "\n\t"],
			["\n\t f√≤√¥ b√†≈ô", "\n\t f√≤√¥ b√†≈ô \n\t", null, false, -1,'UTF-8'],
			['‚Åü‚Åüf√≤√¥', '‚Åü‚Åüf√≤√¥‚Åü‚Åü', null, false, -1,'UTF-8']
		];
	}

}